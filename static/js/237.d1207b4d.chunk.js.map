{"version":3,"file":"static/js/237.d1207b4d.chunk.js","mappings":"8SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,sGACFD,EAAAA,EAAAA,IAAA,qCAAwCD,IADtC,uBACjBG,EADiB,EACjBA,KADiB,kBAGlBA,EAAKC,SAHa,2CAAH,qDAMXC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCN,IADjC,cACtBO,EADsB,yBAGrBA,GAHqB,2CAAH,sDAMdC,EAAU,mCAAG,WAAMC,GAAN,yFACDR,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBS,EADpB,+CADC,uBAChBN,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,sDAQVO,EAAW,mCAAG,WAAMJ,GAAN,uFACFL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFb,cACnBW,EADmB,yBAKlBA,GALkB,2CAAH,sDAQXC,EAAO,mCAAG,WAAMN,GAAN,yFACEL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFjB,uBACbG,EADa,EACbA,KADa,kBAKdA,GALc,2CAAH,qD,8HC/BPU,E,OAAaC,EAAAA,GAAH,mJ,SC4BvB,EA1Be,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,SAACF,EAAD,UACGE,EAAOC,KAAKC,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcT,EAAsB,EAAtBA,KAAMU,EAAgB,EAAhBA,UACtC,OACE,2BACE,gBACEC,IACmB,OAAjBF,EAAA,0CACuCA,GACnCG,EAENC,IAAKb,EACLc,MAAM,MACNC,OAAO,SAGT,uBAAIf,KACJ,uCAAeU,OCHP,eAACM,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDVDG,GAgBZ,KAGN,EEZD,EAXa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOpB,EAAP,KAAeqB,EAAf,KACQ9B,GAAY+B,EAAAA,EAAAA,MAAZ/B,QAMR,OAJAgC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAsBjC,GAASkC,MAAK,SAAArC,GAAI,OAAIiC,EAAUjC,EAAKA,KAAnB,GACzC,GAAE,CAACG,KAEG,8BAAGS,IAAU,SAAC,EAAD,CAAQA,OAAQA,KACrC,C","sources":["components/api-service/api.jsx","components/Actors/Actors.styled.jsx","components/Actors/Actors.jsx","../node_modules/nanoid/index.browser.js","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'f896ccabafb5d2939071b9f1aa9e42c1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getFilmDetails = async movieId => {\n  const responce = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n\n  return responce;\n};\n\nexport const searchFilm = async name => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${name}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const castCredits = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return response;\n};\n\nexport const Reviews = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const ActorLists = styled.ul`\n  margin: 0;\n  padding: 0;\n  margin-top: 30px;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n","import { nanoid } from 'nanoid';\nimport DefaultImg from 'components/default.jpg';\nimport { ActorLists } from './Actors.styled';\n\nconst Actors = ({ actors }) => {\n  return (\n    <ActorLists>\n      {actors.cast.map(({ profile_path, name, character }) => {\n        return (\n          <li key={nanoid()}>\n            <img\n              src={\n                profile_path !== null\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : DefaultImg\n              }\n              alt={name}\n              width=\"100\"\n              height=\"150\"\n            />\n\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n    </ActorLists>\n  );\n};\n\nexport default Actors;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState, useEffect } from 'react';\nimport * as GetActors from 'components/api-service/api';\nimport { useParams } from 'react-router-dom';\nimport Actors from 'components/Actors';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    GetActors.castCredits(movieId).then(data => setActors(data.data));\n  }, [movieId]);\n\n  return <>{actors && <Actors actors={actors} />}</>;\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","getTrending","data","results","getFilmDetails","movieId","responce","searchFilm","name","castCredits","response","Reviews","ActorLists","styled","actors","cast","map","profile_path","character","src","DefaultImg","alt","width","height","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","useState","setActors","useParams","useEffect","GetActors","then"],"sourceRoot":""}